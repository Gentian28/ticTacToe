import { TicTacToe } from './js/game.js';
import { ResultTemplate } from './js/resultTemplate.js';
import * as helpers from './js/helpers.js';

// const socket = io.connect('http://localhost:4001/');
var socket = io.connect('https://tictactoews.herokuapp.com:443/');

const resultTemplate = new ResultTemplate();
let gamesList = [];

socket.on('connected players', numberOfOnlinePlayers => {
    if (localStorage.getItem("uuid") === null) {
        localStorage.setItem('uuid', helpers.uuidv4());
    }
    connectedPlayers.innerHTML = numberOfOnlinePlayers;
});

createRoom.onclick = () => {
    const index = gamesList.map(e => e.gameId).indexOf(localStorage.getItem('uuid'));
    if (index === -1) {
        socket.emit('generate room', localStorage.getItem('uuid'));
    } else {
        console.log('You have already created a game');
    }
}

socket.on('games', games => {
    gamesList = games;
    roomsList.innerHTML = games.length ? '<li class="collection-header"><h5>Rooms List</h5></li>' : '<li class="collection-header"><h6>No rooms, click the button above to generate a new one</h6></li>';

    // populate rooms list
    games.forEach(game => {
        const newGameListElement = document.createElement('li');
        const newGameButton = document.createElement('button');
        const newContent = document.createTextNode('Game generated by ' + game.gameId);
        newGameButton.setAttribute('class', 'collection-item')
        newGameButton.setAttribute('id', game.gameId);
        if (game.players.length >= 2) {
            newGame.setAttribute('disabled', true)
        }
        newGameListElement.appendChild(newGameButton);
        newGameButton.appendChild(newContent);
        roomsList.append(newGameListElement);
    });
});

socket.on('player disconnected', function (data) {
    connectedPlayers.innerHTML = data;
});

let gId = '';
let ticTacToe;
let getTicTacToe;
let currPlayer;

const makeMove = () => {
    getTicTacToe.forEach((cell, index) => {
        cell.onclick = () => {
            if (!cell.hasChildNodes()) {
                // send gameId and move cell address
                if (ticTacToe.turn === currPlayer) {
                    socket.emit('move', { index, gameId: gId });
                } else {
                    console.log('You cant play')
                }
            }
        }
    })
}

socket.on('room joined', data => {
    console.log(data);
    if (data.gameId === gId) {
        roomOnlinePlayers.innerHTML = data.players.length < 2 ? 'Waiting opponent' : '';
        if (data.players.length >= 2) {
            // create new instance of ticTacToe with gameId
            ticTacToe = new TicTacToe(gId, [data.players[0], data.players[1]]);
            if (localStorage.getItem('uuid') === data.players[0]) {
                currPlayer = 0;
            } else {
                currPlayer = 1;
            }
            ticTacToe.newGame();
            getTicTacToe = document.querySelectorAll('#ticTacToeField td');

            makeMove();
        }
    }
    if (data.players.length >= 2) {
        const item = document.getElementById(data.gameId);
        item.setAttribute('disabled', true)
    }
})

// socket.on('')
roomsList.onclick = (event) => {
    if (event.target.tagName === 'BUTTON') {
        ticTacToeField.innerHTML = '';
        gId = event.target.id;
        // current room gameId
        const gameId = event.target.id;
        const playerId = localStorage.getItem("uuid");
        socket.emit('join room', { gameId, playerId })
        // set game section class equal to gameId and display it
        rooms.style.display = 'none';
        game.setAttribute('class', gameId);
        const currentGame = document.getElementsByClassName(gameId);
        currentGame[0].style.display = 'block';
        gameIdContainer.innerHTML = gameId;
    }
}

exitGame.onclick = () => {
    console.log('clicked')
    socket.emit('exit room', { gameId: gId });
}

socket.on('reset', function (data) {
    // console.log(data)
    if (data === gId) {
        getTicTacToe.forEach(element => {
            element.innerHTML = '';
        });
        ticTacToe.reset();
    }
});

// data retruns moves and gameId
socket.on('move made', function (data) {
    if (data.gameId === gId) {
        if (ticTacToe.turn === 0) {
            getTicTacToe[data.index].innerHTML = resultTemplate.playerOneTemplate;
            ticTacToe.moves[data.index] = 'X';
        } else {
            getTicTacToe[data.index].innerHTML = resultTemplate.playerTwoTemplate;
            ticTacToe.moves[data.index] = 'O';
        }
        ticTacToe.checkWinner(ticTacToe.turn, ticTacToe.moves);
        if (!ticTacToe.turn) {
            ticTacToe.turn = 1;
        } else {
            ticTacToe.turn = 0;
        }
    }
})

reset.onclick = () => {
    socket.emit('reset', gId)
}

socket.on('room exited', game => {
    if (game.gameId === gId) {
        roomOnlinePlayers.innerHTML = `Opononet left the game, online players: ${game.players.length}`;
        const gameEl = document.getElementById('game');
        rooms.style.display = 'block';
        gameEl.removeAttribute('class');
        gameEl.style.display = 'none';
        reset.click();
    }
    const item = document.getElementById(game.gameId);
    item.removeAttribute('disabled')
})

socket.on('disconnected socket', socketId => {
    // console.log(socketId);
})