import { TicTacToe } from './js/game.js';
import { ResultTemplate } from './js/resultTemplate.js';
import * as helpers from './js/helpers.js';

const socket = io.connect('http://localhost:4001/');
// var socket = io.connect('https://tictactoews.herokuapp.com:443/');

const resultTemplate = new ResultTemplate();

// set or get localStorage uuid
socket.on('connected players', numberOfOnlinePlayers => {
    if (localStorage.getItem("uuid") === null) {
        localStorage.setItem('uuid', helpers.uuidv4());
    }
    connectedPlayers.innerHTML = numberOfOnlinePlayers;
});

let gamesList = [];
createRoom.onclick = () => {
    const index = gamesList.map(e => e.gameId).indexOf(localStorage.getItem('uuid'));
    if (index === -1) {
        socket.emit('generate room', localStorage.getItem('uuid'));
    } else {
        console.log('You have already created a game');
    }
}

socket.on('games', games => {
    gamesList = games;
    roomsList.innerHTML = '';
    // console.log(games);

    // populate rooms list
    games.forEach(game => {
        console.log(game)
        const newGame = document.createElement('button');
        const newContent = document.createTextNode('Game generated by ' + game.gameId);
        newGame.setAttribute('id', game.gameId);
        if (game.players.length >= 2) {
            newGame.setAttribute('disabled', true)
        }
        newGame.appendChild(newContent);
        roomsList.append(newGame);
    });
    // roomsList.innerHTML = gamesList;
});

socket.on('player disconnected', function (data) {
    connectedPlayers.innerHTML = data;
});



socket.on('room joined', data => {
    onlinePlayers.innerHTML = data.players.length;
    const item = document.getElementById(data.gameId);
    if (data.players.length >= 2) {
        item.setAttribute('disabled', true)
    }
    console.log(data);
})



// socket.on('')

roomsList.onclick = (event) => {
    console.log(event.target)
    const gameId = event.target.id;
    const playerId = localStorage.getItem("uuid");
    socket.emit('join room', { gameId, playerId })
    // console.log(event);
    rooms.style.display = 'none';
    game.setAttribute('class', gameId);
    const currentGame = document.getElementsByClassName(gameId);
    currentGame[0].style.display = 'block';
    gameIdContainer.innerHTML = gameId;

    let ticTacToe = new TicTacToe(gameId);
    // console.log(ticTacToe)
    ticTacToe.newGame();
    // console.log(gameId)
    // console.log(ticTacToe.gameId)
    const getTicTacToe = document.querySelectorAll('#ticTacToeField td');

    const makeMove = () => {
        getTicTacToe.forEach((cell, index) => {
            cell.onclick = () => {
                if (!cell.hasChildNodes()) {
                    socket.emit('move', { index, gameId });
                }
            }
        })
    }

    makeMove();


    socket.on('move made', function (data) {
        console.log(data)
        if (data.gameId === gameId) {
            if (ticTacToe.turn === 0) {
                getTicTacToe[data.index].innerHTML = resultTemplate.playerOneTemplate;
                ticTacToe.moves[data.index] = 'X';
            } else {
                getTicTacToe[data.index].innerHTML = resultTemplate.playerTwoTemplate;
                ticTacToe.moves[data.index] = 'O';
            }
            console.log(ticTacToe.moves);
            ticTacToe.checkWinner(ticTacToe.turn, ticTacToe.moves);
            if (!ticTacToe.turn) {
                ticTacToe.turn = 1;
            } else {
                ticTacToe.turn = 0;
            }
        }
    })

    reset.onclick = () => {
        socket.emit('reset', gameId)
    }

    socket.on('reset', function (data) {
        console.log(data)
        if (data === gameId) {
            getTicTacToe.forEach((element, index) => {
                element.innerHTML = '';
            });
            ticTacToe.reset();
            console.log(ticTacToe)
        }
    });

    exitGame.onclick = () => {
        console.log('clicked')
        socket.emit('exit room', { gameId, playerId });
    }


}

socket.on('room exited', game => {
    console.log(game);
    rooms.style.display = 'block';
    const item = document.getElementById(game.gameId);
    if (game.players.length && game.players.length < 2) {
        item.removeAttribute('disabled')
    }
})